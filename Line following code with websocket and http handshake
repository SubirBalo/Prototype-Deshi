#include <SPI.h>
#include <WiFiNINA.h>
#include "cencode_inc.h"
#include "libsha1.h"
#include "webpage.h"
#include "arduino_secrets.h"

// WiFi credentials
char ssid[] = "Hammad";       
char pass[] = "paklhr123";    


// Define pins for motor driver
const int in1Pin = 11;
const int in2Pin = 10;
const int in3Pin = 13;
const int in4Pin = 12;
const int enA = 5;
const int enB = 6;
// Define pins for ultrasonic sensor
const int trigPin = 2;
const int echoPin = 3;
// Define pins for IR sensor
const int leftsensorPin = 8;
const int rightsensorPin = 7;
// Define variables for ultrasonic sensor
long duration;
int distance;
int motorSpeed =110;


#define s0 5        //Module pins  wiring
#define s1 6
#define s2 7
#define s3 8
#define out 4

int  Red=0, Blue=0, Green=0;  //RGB values 

int led = LED_BUILTIN;
int status = WL_IDLE_STATUS;
WiFiServer server(80);
WiFiServer wsserver(8080);
WiFiClient wsclient;

String GUID = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";

String base64_encode(uint8_t * data, size_t length) {
    size_t size = ((length * 1.6f) + 1);
    char * buffer = (char *)malloc(size);
    if(buffer) {
        base64_encodestate _state;
        base64_init_encodestate(&_state);
        int len = base64_encode_block((const char *)&data[0], length, &buffer[0], &_state);
        len = base64_encode_blockend((buffer + len), &_state);
        String base64 = String(buffer);
        free(buffer);
        return base64;
    }
    return String("-FAIL-");
}

void setup() {
    Serial.begin(9600);
    while (!Serial) { ; }

    Serial.println("Access Point Web Server");
    pinMode(led, OUTPUT);
pinMode(s0,OUTPUT);    //pin modes
   pinMode(s1,OUTPUT);
   pinMode(s2,OUTPUT);
   pinMode(s3,OUTPUT);
   pinMode(out,INPUT);

   Serial.begin(9600);   //intialize the serial monitor  baud rate
   
   digitalWrite(s0,HIGH); //Putting S0/S1 on HIGH/HIGH levels  means the output frequency scalling is at 100% (recommended)
   digitalWrite(s1,HIGH);  //LOW/LOW is off HIGH/LOW is 20% and LOW/HIGH is  2%
   
    if (WiFi.status() == WL_NO_MODULE) {
        Serial.println("Communication with WiFi module failed!");
        while (true);
    }

    String fv = WiFi.firmwareVersion();
    if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
        Serial.println("Please upgrade the firmware");
    }

    WiFi.config(IPAddress(190, 160, 2, 2));

    Serial.print("Creating access point named: ");
    Serial.println(ssid);

    status = WiFi.beginAP(ssid, pass);
    if (status != WL_AP_LISTENING) {
        Serial.println("Creating access point failed");
        while (true);
    }

    delay(3000);

    server.begin();
    wsserver.begin();
    wsclient.stop();

    printWiFiStatus();
    

    // Initialize motor driver pins
 pinMode(in1Pin, OUTPUT);
 pinMode(in2Pin, OUTPUT);
 pinMode(in3Pin, OUTPUT);
 pinMode(in4Pin, OUTPUT);
 pinMode(enA, OUTPUT);
 pinMode(enB, OUTPUT);
 // Initialize ultrasonic sensor pins
 pinMode(trigPin, OUTPUT);
 pinMode(echoPin, INPUT);
 // Initialize IR sensor pin
 pinMode(leftsensorPin, INPUT);
 pinMode(rightsensorPin, INPUT);
 // Set initial speed for both motors
 analogWrite(enA, motorSpeed);
 analogWrite(enB,motorSpeed );
    pinMode(s0, OUTPUT);    // Pin modes
   pinMode(s1, OUTPUT);
   pinMode(s2, OUTPUT);
   pinMode(s3, OUTPUT);
   pinMode(out, INPUT);

   Serial.begin(9600);   // Initialize the serial monitor baud rate
   
   digitalWrite(s0, HIGH); // Setting S0/S1 to HIGH/HIGH levels means the output frequency scaling is at 100%
   digitalWrite(s1, HIGH); // LOW/LOW is off, HIGH/LOW is 20%, and LOW/HIGH is 2%
}

void forward() {
 digitalWrite(in1Pin, LOW);
 digitalWrite(in2Pin, HIGH);
 digitalWrite(in3Pin, LOW);
 digitalWrite(in4Pin, HIGH);
}
void forwardU() {
 analogWrite(enA, motorSpeed);
 analogWrite(enB,motorSpeed );
 digitalWrite(in1Pin, LOW);
 digitalWrite(in2Pin, HIGH);
 digitalWrite(in3Pin, LOW);
 digitalWrite(in4Pin, HIGH);
}
void left() {
 analogWrite(enA, motorSpeed);
 analogWrite(enB,motorSpeed );
 digitalWrite(in1Pin, LOW);
 digitalWrite(in2Pin, HIGH);
 digitalWrite(in3Pin, HIGH);
 digitalWrite(in4Pin, LOW);
}
void stop() {
 digitalWrite(in1Pin, LOW);
 digitalWrite(in2Pin, LOW);
 digitalWrite(in3Pin, LOW);
 digitalWrite(in4Pin, LOW);
}
void right() {
 analogWrite(enA, motorSpeed);
 analogWrite(enB,motorSpeed );
 digitalWrite(in1Pin, HIGH);
 digitalWrite(in2Pin, LOW);
 digitalWrite(in3Pin, LOW);
 digitalWrite(in4Pin, HIGH);
}
void turn() {
 analogWrite(enA, 0);
 analogWrite(enB,100 );
 digitalWrite(in1Pin, LOW);
 digitalWrite(in2Pin, LOW);
 digitalWrite(in3Pin, LOW);
 digitalWrite(in4Pin, HIGH);
}


void check_wifi_status() {
    if (status != WiFi.status()) {
        status = WiFi.status();
        if (status == WL_AP_CONNECTED) {
            Serial.println("Device connected to AP");
        } else {
            Serial.println("Device disconnected from AP");
        }
    }
}

void check_web_request() {
    WiFiClient client = server.available(); 
    if (client) {                         
        Serial.println("new client");       
        String request = "";                
        while (client.available()) {     
            char c = client.read();       
            Serial.write(c);              
            request += c;                 
        }
        if (request.startsWith("GET / HTTP/1.1")) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            client.println(webpage);
            client.println();
        } else {
            client.println("HTTP/1.1 404 Not Found");
            client.println();     
        }
        client.stop();
        Serial.println("client disconnected");
    }
}

void handshake() {
    size_t matchpos = 0;
    bool nonce_active = false;
    String nonce = "";
    String Sec_WebSocket_Key = "Sec-WebSocket-Key: ";
    Serial.println("new WS client");

    while (wsclient.available()) {
        char c = wsclient.read();
        if (nonce_active) {
            if (c != '\r' && c != '\n') {
                nonce += c;
            } else {
                nonce_active = false;
            }
        }
        if (c == Sec_WebSocket_Key[matchpos]) {
            matchpos++;
            if (matchpos == Sec_WebSocket_Key.length()) {
                nonce_active = true;
            }
        } else {
            matchpos = 0;
        }
    }

    if (nonce.length() > 0) {
        uint8_t sha1HashBin[20] = { 0 };
        String clientKey = nonce;
        clientKey += GUID;

        SHA1_CTX ctx;
        SHA1Init(&ctx);
        SHA1Update(&ctx, (const unsigned char*)clientKey.c_str(), clientKey.length());
        SHA1Final(&sha1HashBin[0], &ctx);

        String key = base64_encode(sha1HashBin, 20);
        key.trim();

        Serial.print("Nonce: \"");
        Serial.print(nonce);
        Serial.print("\" -> \"");
        Serial.print(key);
        Serial.println("\"");

        wsclient.print("HTTP/1.1 101 Web Socket Protocol Handshake\r\n");
        wsclient.print("Upgrade: websocket\r\n");
        wsclient.print("Connection: Upgrade\r\n");
        wsclient.print("Sec-WebSocket-Accept: ");
        wsclient.print(key);
        wsclient.print("\r\n\r\n");
    }
}

enum {
    WS_FIN = 0x80,
    WS_FIN_SHIFT = 0x07,
    WS_FR_OP_TXT = 0x01,
    WS_FR_OP_BIN = 0x02,
    WS_FR_OP_CLOSE = 0x08,
    WS_FR_OP_PING = 0x09,
    WS_FR_OP_PONG = 0x0A,
    WS_FR_OP_UNSUPPORTED = 0x0F,
};

uint8_t fromhex(char c) {
    if ('0' <= c && c <= '9') { return c - '0'; }
    if ('A' <= c && c <= 'F') { return c - 'A' + 10; }
    if ('a' <= c && c <= 'f') { return c - 'a' + 10; }
    return 0;
}

uint8_t R;
uint8_t G;
uint8_t B;
uint8_t LED_value;
uint8_t RGBSENSOR;
void ws_send() {
    char c;
    c = WS_FIN | WS_FR_OP_BIN;
    wsclient.write(c);
    c = 4;
    wsclient.write(c);
    wsclient.write(R);
    wsclient.write(G);
    wsclient.write(B);
    wsclient.write(LED_value);
    wsclient.write(distance);
}

void check_ws_request() {
    if (wsclient.connected()) {
        int total = 0;
        while (wsclient.available()) {
            char c = wsclient.read();
            total++;
            char n;
            char op = c & 0x0F;
            Serial.print(c, HEX);
            Serial.print(" ");
            switch(op) {
                case WS_FR_OP_TXT: Serial.println("TXT"); break;
                case WS_FR_OP_BIN: Serial.println("BIN"); break;
                case WS_FR_OP_CLOSE: Serial.println("CLOSE"); break;
                case WS_FR_OP_PING: Serial.println("PING"); break;
                case WS_FR_OP_PONG: Serial.println("PONG"); break;
                case WS_FR_OP_UNSUPPORTED: Serial.println("UNSUPPORTED"); break;
            }

            n = wsclient.read();
            bool is_mask = (0x80 & n) != 0;
            n = n & 0x7F;
            total++;
            Serial.println(n, DEC);
            char mask[4];
            mask[0] = wsclient.read();
            mask[1] = wsclient.read();
            mask[2] = wsclient.read();
            mask[3] = wsclient.read();
            String cmd = "";
            while(n > 0) {
                for (char i = 0; i < 4 && n > 0; i++, n--) {
                    c = wsclient.read() ^ mask[i];
                    cmd += c;
                    total++;
                }
            }

            const char* s = cmd.c_str();
            LED_value = fromhex(s[0]);
            R = fromhex(s[2]) << 4 | fromhex(s[3]);
            G = fromhex(s[4]) << 4 | fromhex(s[5]);
            B = fromhex(s[6]) << 4 | fromhex(s[7]); 
            WiFiDrv::analogWrite(25, R);
            WiFiDrv::analogWrite(26, G);
            WiFiDrv::analogWrite(27, B);
            digitalWrite(LED_BUILTIN, LED_value);

            ws_send();
        }
    } else { 
        wsclient = wsserver.available();
        if (!wsclient.connected()) { wsclient.stop(); return; }
        handshake();
    }
}
void sendUltrasonicDataToWebSocket(int distance) {
    char data[5]; // Prepare a buffer to hold the data to send
    data[0] = WS_FIN | WS_FR_OP_BIN; // WebSocket frame header for binary data
    data[1] = 1; // Length of the data to send (in this case, 1 byte)
    data[2] = distance; // Actual data to send (ultrasonic distance)
    wsclient.write(data, 3); // Send the WebSocket frame

    Serial.print("Sent ultrasonic distance: ");
    Serial.println(distance);
}
void loop() {
    if (!wsclient.connected()) {
        check_wifi_status();
        check_web_request();
    }
    check_ws_request();
                                                   //Depending  of the RGB values given by the sensor we can define the color and displays it on  the monitor
/*
  if (Red <=15 && Green <=15 && Blue <=15)  {

        //If the values  are low it's likely the white color (all the colors are present)
      Serial.println("White");
            RGBSENSOR == 1;

}                    
  else if (Red<Blue && Red<=Green && Red<23)      //if  Red value is the lowest one and smaller thant 23 it's likely Red
      Serial.println("Red");
  else if (Blue<Green && Blue<Red && Blue<20)    //Same thing for Blue
      Serial.println("Blue");

  else if (Green<Red && Green-Blue<= 8)           //Green it was a little tricky,  you can do it using the same method as above (the lowest), but here I used a reflective  object
      Serial.println("Green");                    //which means the  blue value is very low too, so I decided to check the difference between green and  blue and see if it's acceptable

  else
     Serial.println("Unknown");                  //if the color is not recognized, you can add as many as you want


  delay(500);                                   //2s delay you can modify if you  want
  */
  // Read IR sensor input
 int leftsensorValue = digitalRead(leftsensorPin);
 int rightsensorValue = digitalRead(rightsensorPin);
analogWrite(enA, motorSpeed);
 analogWrite(enB,motorSpeed );
 if (leftsensorValue == 1 && rightsensorValue == 1) {
 forward();
 } else if (leftsensorValue == 0 && rightsensorValue == 1) {
 right();
 } else if (leftsensorValue == 1 && rightsensorValue == 0) {
 left();

 }
 //color sensor
   GetColors();  // Execute the GetColors function to get the value of each RGB color

 // Ultrasonic sensor code

 digitalWrite(trigPin, LOW);
 delayMicroseconds(2);
 digitalWrite(trigPin, HIGH);
 delayMicroseconds(7);
 digitalWrite(trigPin, LOW);
 duration = pulseIn(echoPin, HIGH);
 distance = duration/34.2;
  // Send ultrasonic data to web page
      // Send sensor data over WebSocket
    // Print ultrasonic distance to Serial Monitor for debugging
    Serial.print("Ultrasonic Distance: ");
    Serial.println(distance);

    // Send ultrasonic data over WebSocket
    if (wsclient.connected()) {
        sendUltrasonicDataToWebSocket(distance);
    }
 if(distance==0){
 distance=100;
 }


 if(distance < 20 )
 {

 left();
 delay(900);
 forward();
 delay(1400);
 right();
 delay(1200);
 forwardU();
 leftsensorValue = digitalRead(leftsensorPin);
 rightsensorValue = digitalRead(rightsensorPin);

while(leftsensorValue == 1 && rightsensorValue == 1 ){
 leftsensorValue = digitalRead(leftsensorPin);
rightsensorValue = digitalRead(rightsensorPin);
}
 stop();
 delay(2000);
 forwardU();
 delay(100);
 rightsensorValue = digitalRead(rightsensorPin);
 turn();
 while(rightsensorValue == 1){
 rightsensorValue = digitalRead(rightsensorPin);
}

}

  
}

void GetColors()  
{    
  digitalWrite(s2,  LOW);                                           //S2/S3 levels define which set  of photodiodes we are using LOW/LOW is for RED LOW/HIGH is for Blue and HIGH/HIGH  is for green 
  digitalWrite(s3, LOW);                                           
  Red = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);       //here we wait  until "out" go LOW, we start measuring the duration and stops when "out" is  HIGH again, if you have trouble with this expression check the bottom of the code
  delay(20);  
  digitalWrite(s3, HIGH);                                         //Here  we select the other color (set of photodiodes) and measure the other colors value  using the same techinque
  Blue = pulseIn(out, digitalRead(out) == HIGH ? LOW  : HIGH);
  delay(20);  
  digitalWrite(s2, HIGH);  
  Green = pulseIn(out,  digitalRead(out) == HIGH ? LOW : HIGH);
  delay(20);  
}

void printWiFiStatus() {
    Serial.print("SSID: ");
    Serial.println(WiFi.SSID());

    IPAddress ip = WiFi.localIP();
    Serial.print("IP Address: ");
    Serial.println(ip);

    Serial.print("To see this page in action, open a browser to http://");
    Serial.println(ip);
}



